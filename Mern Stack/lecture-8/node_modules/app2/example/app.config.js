var appConfig = {
    environment: 2 //环境标识（用于数组选值）：0->服务器环境, 1->测试环境, 2->本地环境
};
//ajax请求相关
appConfig.ajax = {
    //所有请求的名字，这里可以是对象，也可是数组，但请不要使用“common”字段和值
    name: {
        a: "aaa",
        b: "bbb",
        c: "ccc",
        d: "ddd"
    },
    //url请求地址
    url: {
        //数组
        aaa: ["url1", "url2", "url3"],
        bbb: ["url1", "url2", "url3"],
        ccc: ["url1", "url2", "url3"],
        ddd: ["url1", "url2", "url3"]
    },
    //请求的键名
    requestKeys: {
        //可以是一维数组，也可是二维数组，如果是一维数组，代表没有键，如果是二维数组，代表键值都有
        aaa: [["a", "b"], ["c", "d"], ["e", "f"]],
        bbb: [["a", "b"], ["c", "d"], ["e", "f"]],
        ccc: [{a: "a", b: "b"}, {c: "c", d: "d"}, {e: "e", f: "f"}],
        ddd: [{a: "a", b: "b"}, {c: "c", d: "d"}, {e: "e", f: "f"}]
    },
    //重新格式化json数据，针对每一个
    responseRefactor: {
        //数组，根据environmentFlag来判定，如果是非数组，则表示标识为0的环境
        common: [{}, {}, {}],
        aaa: [{}, {}],
        bbb: [{}],
        ccc: {},
        ddd: {}
    },
    //ajax请求前置处理（用于格式化请求参数）
    preHandle: {
        //数组，根据environmentFlag来判定，如果是非数组，则表示标识为0的环境
        common: [function (data) {}, function () {}, function () {}],
        aaa: [function (data) {}, function () {}],
        bbb: [function (data) {}],
        ccc: function (data) {},
        ddd: function (data) {}
    },
    //ajax请求后置处理（用于格式化请求到的数据）
    postHandle: {
        //数组，根据environmentFlag来判定，如果是非数组，则表示标识为0的环境
        common: [function (data) {}, function () {}, function () {}],
        aaa: [function (data) {}, function () {}],
        bbb: [function (data) {}],
        ccc: function (data) {},
        ddd: function (data) {}
    }
};
//事件监听
appConfig.event = {
    //事件代理元素，默认是document
    el: "body",
    events: {
        //重中之重，元素与事件之间使用空格分隔，多个事件之间用逗号分隔，且不能有空格
        //一个事件，一个监听对象，默认使用代理
        "click #id": "haha",
        //前面加一个感叹号表示不使用代理
        "!focus tagName": "haha",
        //二级元素，也使用代理
        "click .class tagName": "haha",
        //多个事件
        "click,focus #id": "haha",
        //多个事件，不使用代理
        "!click,focus tagName": "haha",
        //多个元素
        "click .class, tagName, #id .class tagName": "haha"

    },
    haha: function(e) {

    }
};

/**
 * 模板渲染函数，默认使用 [juicer](https://github.com/PaulGuo/Juicer) (一个小巧的模板引擎)
 *
 * 比如
 * handlebars: Handlebars.compile
 * juicer: juicer
 */
appConfig.templateRenderer = void 0;

//模板
appConfig.template = {
    tpl1: "cdvbkjd",
    tpl2: {
        tpl22: "vjjksm"
    },
    tpl3: {
        tpl33: {
            tpl333: "vfkdvnjk"
        }
    }
};
//数据绑定
appConfig.dataBind = {
    //数据名
    name1: {
        element: "el",//元素绑定到某一个元素上
        template: "templateName"//模板名
    },
    name2: {
        element: "",//元素绑定到某一个元素上
        template: {//可以是对象（多个模板选择）
            fieldName: {//字段标识，以数据中的哪个字段来判断是用哪个模板
                fieldValue: "templateName.subTemplateName.subSubTemplateName"//fieldValue: 字段值， templateName：模板名，多级请采用点语法
            }
        }
    }
};
